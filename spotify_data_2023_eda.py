{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.13","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":6367938,"sourceType":"datasetVersion","datasetId":3668746},{"sourceId":7850211,"sourceType":"datasetVersion","datasetId":4603529}],"dockerImageVersionId":30698,"isInternetEnabled":true,"language":"python","sourceType":"script","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"# %% [markdown]\n# # **Spotify data 2023 EDA**\n# \n# As a musicðŸŽµ enthusiast, I was interested in exploring this **[Spotify dataset](https://www.kaggle.com/datasets/nelgiriyewithana/top-spotify-songs-2023)** to uncover interesting insights and correlations. I have performed a few analyses, and you can check them out.\n# \n# * **Number of Tracks released each year**\n# \n# * **Artist Analysis**:\n# 1. Analyze the number of tracks each artist features in. Pick the top 20 artists. \n# 1. Examine if the audio features `bpm`, `danceability_%`, `valence_%`, `energy_%`, `acousticness_%`, `liveness_%`, `speechiness_%`,`key`,`mode` tend to co-occur together in the 20 most streamed tracks.\n# 1. Categorical Features: \n#    * analyse the Distribution of `key_mode`s\n#    * examine how `key` and `mode` trend over the years.\n\n# %% [code] {\"jupyter\":{\"outputs_hidden\":false}}\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport plotly.express as px\n\nfile = '/kaggle/input/top-spotify-songs-2023/spotify-2023.csv'\n\nmusic = pd.read_csv(file,encoding='latin1') #utf8 doesn't work\n\nmusic.head(10)\n\n# %% [code] {\"jupyter\":{\"outputs_hidden\":false}}\n# Add an 'Index' column to the music dataset\nmusic['Index'] = range(0,953)\n\nmusic_cleaned = music.copy() # create a copy to preserve the original dataset\n\nmusic_cleaned.head(5)\n\n# %% [markdown]\n# # **Data Cleaning**\n\n# %% [code] {\"jupyter\":{\"outputs_hidden\":false}}\n# Number of rows and columns\nmusic_cleaned.shape\n\n# %% [code] {\"jupyter\":{\"outputs_hidden\":false}}\nmusic_cleaned.info()\n\n# %% [code] {\"jupyter\":{\"outputs_hidden\":false}}\n# Get Missing values\nmusic_cleaned.isnull().sum() # missing values in in_shazam_charts and key columns\n\n# %% [code] {\"jupyter\":{\"outputs_hidden\":false}}\n# Drop the in_shazam_charts column\nmusic_cleaned = music_cleaned.drop(columns='in_shazam_charts')\n\n# %% [code] {\"jupyter\":{\"outputs_hidden\":false}}\n# Find all rows with missing key values \nmissing_key_rows = music_cleaned[music_cleaned.isnull().any(axis=1)]\n\n# Select only the desired columns\nmissing_columns = missing_key_rows[['track_name','artist(s)_name','key', 'mode']]\n\n# The first 50 missing values\nprint(missing_columns.head(50))\n\n# %% [code] {\"jupyter\":{\"outputs_hidden\":false}}\n# The last 45 missing values \nprint(missing_columns.tail(45))\n\n# %% [markdown]\n# I used  [Songbpm](https://songbpm.com/) to determine the key and mode for each track. I saved the values in a **CSV file** and then imputed them in order.\n\n# %% [code] {\"jupyter\":{\"outputs_hidden\":false}}\n# Load the excel file containing the right keys \nfile = \"/kaggle/input/spotify-missing-keys/Spotify Missing Keys.xlsx\"\n\nspotify_missing_keys = pd.read_excel(file)\n\nspotify_missing_keys[['Index','key','mode']].head(50)\n\n# %% [code] {\"jupyter\":{\"outputs_hidden\":false}}\nspotify_missing_keys[['Index','key','mode']].tail(45)\n\n# %% [code] {\"jupyter\":{\"outputs_hidden\":false}}\n# Iterate over all rows with missing keys\nfor index, row in music_cleaned.iterrows():\n    if pd.isnull(row['key']):\n        if index == 124:\n            music_cleaned.at[index, 'key'] = 'A'\n        elif index == 405:\n            music_cleaned.at[index, 'key'] = 'E'\n        elif index == 532:\n            music_cleaned.at[index, 'key'] = 'G#'\n        else:\n            music_cleaned.at[index, 'key'] = 'C'\n\n# %% [code] {\"jupyter\":{\"outputs_hidden\":false}}\nmusic_cleaned.isnull().sum()\n\n# %% [code] {\"jupyter\":{\"outputs_hidden\":false}}\n# Inspect some rows that originally had keys and those that had missing keys\n\nmusic_cleaned.iloc[[0,2,9,12,124,405,532]]\n\n# %% [code] {\"jupyter\":{\"outputs_hidden\":false}}\n# New column 'key_mode'\nmusic_cleaned['key_mode']=music_cleaned['key']+' '+music_cleaned['mode']  # Example; A Major, C# Major\n\n# %% [code] {\"jupyter\":{\"outputs_hidden\":false}}\nmusic_cleaned.head(20)\n\n# %% [code] {\"jupyter\":{\"outputs_hidden\":false}}\nmusic_cleaned.describe() # describe numerical data\n\n# %% [code] {\"jupyter\":{\"outputs_hidden\":false}}\n# Uncomment and run this code if you want to get the cleaned csv file. \n# output_file = music_cleaned.to_csv('music_cleaned.csv')\n\n# %% [markdown]\n# # Number of Tracks released each year\n# \n# Most people listen to songs regardless of the year of release. You'll see that in this 2023 dataset.\n\n# %% [code] {\"jupyter\":{\"outputs_hidden\":false}}\n# Number of Tracks released in each year\nyears = [2023,2022,2021,2020,2019,2018]\n\nfor year in years:\n    tracks_by_year = music_cleaned[music_cleaned['released_year'] == year].shape[0]\n    print(f\"Number of Tracks released in {year}: {tracks_by_year}\")\n    \ntracks_before_2018 = music_cleaned[music_cleaned['released_year'] < 2018].shape[0]\nprint('Number of Tracks released before 2018:',tracks_before_2018)\n\n# %% [markdown]\n# # Artist Analysis\n# \n# ## Top 20 Artists with the most Tracks\n\n# %% [code] {\"jupyter\":{\"outputs_hidden\":false}}\n# Get the Top 20 Artists with the most tracks in the dataset\nartist_counts =music_cleaned['artist(s)_name'].value_counts()\ntop_artists = artist_counts.head(20)\n\ntop_artists\n\n# %% [markdown]\n# # Barplot of the Top 20 artists with most tracks\n\n# %% [code] {\"jupyter\":{\"outputs_hidden\":false}}\n# Barplot of Top 20 artists with most tracks\n\nplt.figure(figsize=(12, 8))\nsns.barplot(x=top_artists.values, y=top_artists.index, palette='viridis')\nplt.xlabel('Number of tracks')\nplt.ylabel('Artist(s) Name')\nplt.title('Top 20 Artists with the Most Tracks')\n\n# Add data labels to the bars\nfor index, value in enumerate(top_artists.values):\n    plt.annotate(str(value), xy=(value, index), ha='left')\n    \nplt.show()\n\n# %% [markdown]\n# # Impute vs Drop\n# \n# I imputed the missing keys instead of dropping the 95 rows because it would have affected the ranking of other artists in the top 20 list. Taylor Swift would still be the top either way.\n\n# %% [markdown]\n# # Top 20 Most Streamed Tracks\n\n# %% [code] {\"jupyter\":{\"outputs_hidden\":false}}\n#  Top 20 Most Streamed tracks\ntop_twenty_most_streamed_tracks = music_cleaned.sort_values(by='streams',ascending = False).iloc[:20]\n\ntop_twenty_most_streamed_tracks[['track_name','artist(s)_name','streams','key','mode']]\n\n# List the audio features\naudio_features = ['bpm', 'danceability_%', 'valence_%', 'energy_%',\n                  'acousticness_%', 'liveness_%', 'speechiness_%']\n\ntop_twenty_audio_features = top_twenty_most_streamed_tracks[audio_features]\n\n# Calculate Correlation Matrix\ncorrelation_matrix = top_twenty_audio_features.corr()\n\n# Plot the Correlation Matrix Heatmap\nplt.figure(figsize=(10, 8))\nsns.heatmap(correlation_matrix, annot=True, cmap='coolwarm', fmt=\".2f\")\nplt.title('Correlation Matrix of Audio Features in Top 20 Most Streamed Tracks')\nplt.show()\n\n# %% [markdown]\n# 1. Energy and Danceability (0.60 correlation):\n# \n# A correlation of 0.60 indicates a positive and moderately strong relationship.\n# Energetic music often makes you want to move your body and dance.\n# \n# 2. Energy and Valence (0.53 correlation):\n# \n# The correlation of 0.53 is again positive but slightly weaker than the energy-danceability correlation.\n# Energetic music can often be uplifting, exciting, or motivating.\n\n# %% [markdown]\n# # Distribution of Key_Modes\n# \n# I added another column `key_mode`to combine the `key` and `mode `columns.\n\n# %% [code] {\"jupyter\":{\"outputs_hidden\":false}}\nkey_mode_counts = music_cleaned['key_mode'].value_counts()\nprint('Keys used', key_mode_counts)\n\n# %% [code] {\"jupyter\":{\"outputs_hidden\":false}}\nimport plotly.express as px\n\n# Select relevant columns\ndata = music_cleaned[['released_year', 'key', 'mode']]\n\n# Create a scatter plot\nfig = px.scatter(data, x='released_year', y='key', color='mode',\n                 title='Trends of Key Modes Over Time',\n                 labels={'released_year': 'Released Year', 'key': 'Key'},\n                 width=800, height=600)\n\n# Show plot\nfig.show()\n\n# %% [markdown]\n# When listening to music one day with my sister she said that many songs these days sound **'sad'**. I studied music in highschool so I knew she meant that more songs are in the **Minor mode**. The figure above shows that trend.\n\n# %% [markdown]\n# Feel free to do more analyses using this spotify dataset. Contact me for any changes and feedback\n# \n# ***Explore and be teachable***","metadata":{"_uuid":"b4e30c41-4b24-4e04-87de-0e07e3c09daf","_cell_guid":"87149f8d-74ab-46cd-9c1e-20f4405a823d","collapsed":false,"jupyter":{"outputs_hidden":false},"trusted":true},"execution_count":null,"outputs":[]}]}